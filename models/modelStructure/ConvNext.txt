ConvNeXt(
  (features): Sequential(
    (0): Conv2dNormActivation(
      (0): Conv2d(3, 128, kernel_size=(4, 4), stride=(4, 4))
      (1): LayerNorm2d((128,), eps=1e-06, elementwise_affine=True)
    )
    (1): Sequential(
      (0): CNBlock(
        (block): Sequential(
          (0): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=128)
          (1): Permute()
          (2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=128, out_features=512, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=512, out_features=128, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.0, mode=row)
      )
      (1): CNBlock(
        (block): Sequential(
          (0): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=128)
          (1): Permute()
          (2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=128, out_features=512, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=512, out_features=128, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.014285714285714285, mode=row)
      )
      (2): CNBlock(
        (block): Sequential(
          (0): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=128)
          (1): Permute()
          (2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=128, out_features=512, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=512, out_features=128, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.02857142857142857, mode=row)
      )
    )
    (2): Sequential(
      (0): LayerNorm2d((128,), eps=1e-06, elementwise_affine=True)
      (1): Conv2d(128, 256, kernel_size=(2, 2), stride=(2, 2))
    )
    (3): Sequential(
      (0): CNBlock(
        (block): Sequential(
          (0): Conv2d(256, 256, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=256)
          (1): Permute()
          (2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=256, out_features=1024, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=1024, out_features=256, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.04285714285714286, mode=row)
      )
      (1): CNBlock(
        (block): Sequential(
          (0): Conv2d(256, 256, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=256)
          (1): Permute()
          (2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=256, out_features=1024, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=1024, out_features=256, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.05714285714285714, mode=row)
      )
      (2): CNBlock(
        (block): Sequential(
          (0): Conv2d(256, 256, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=256)
          (1): Permute()
          (2): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=256, out_features=1024, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=1024, out_features=256, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.07142857142857142, mode=row)
      )
    )
    (4): Sequential(
      (0): LayerNorm2d((256,), eps=1e-06, elementwise_affine=True)
      (1): Conv2d(256, 512, kernel_size=(2, 2), stride=(2, 2))
    )
    (5): Sequential(
      (0): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.08571428571428572, mode=row)
      )
      (1): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.1, mode=row)
      )
      (2): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.11428571428571428, mode=row)
      )
      (3): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.12857142857142856, mode=row)
      )
      (4): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.14285714285714285, mode=row)
      )
      (5): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.15714285714285714, mode=row)
      )
      (6): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.17142857142857143, mode=row)
      )
      (7): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.18571428571428572, mode=row)
      )
      (8): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.2, mode=row)
      )
      (9): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.21428571428571427, mode=row)
      )
      (10): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.22857142857142856, mode=row)
      )
      (11): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.24285714285714285, mode=row)
      )
      (12): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.2571428571428571, mode=row)
      )
      (13): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.2714285714285714, mode=row)
      )
      (14): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.2857142857142857, mode=row)
      )
      (15): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.3, mode=row)
      )
      (16): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.3142857142857143, mode=row)
      )
      (17): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.32857142857142857, mode=row)
      )
      (18): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.34285714285714286, mode=row)
      )
      (19): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.35714285714285715, mode=row)
      )
      (20): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.37142857142857144, mode=row)
      )
      (21): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.38571428571428573, mode=row)
      )
      (22): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.4, mode=row)
      )
      (23): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.4142857142857143, mode=row)
      )
      (24): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.42857142857142855, mode=row)
      )
      (25): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.44285714285714284, mode=row)
      )
      (26): CNBlock(
        (block): Sequential(
          (0): Conv2d(512, 512, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=512)
          (1): Permute()
          (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=512, out_features=2048, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=2048, out_features=512, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.45714285714285713, mode=row)
      )
    )
    (6): Sequential(
      (0): LayerNorm2d((512,), eps=1e-06, elementwise_affine=True)
      (1): Conv2d(512, 1024, kernel_size=(2, 2), stride=(2, 2))
    )
    (7): Sequential(
      (0): CNBlock(
        (block): Sequential(
          (0): Conv2d(1024, 1024, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1024)
          (1): Permute()
          (2): LayerNorm((1024,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=1024, out_features=4096, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=4096, out_features=1024, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.4714285714285714, mode=row)
      )
      (1): CNBlock(
        (block): Sequential(
          (0): Conv2d(1024, 1024, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1024)
          (1): Permute()
          (2): LayerNorm((1024,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=1024, out_features=4096, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=4096, out_features=1024, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.4857142857142857, mode=row)
      )
      (2): CNBlock(
        (block): Sequential(
          (0): Conv2d(1024, 1024, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1024)
          (1): Permute()
          (2): LayerNorm((1024,), eps=1e-06, elementwise_affine=True)
          (3): Linear(in_features=1024, out_features=4096, bias=True)
          (4): GELU(approximate='none')
          (5): Linear(in_features=4096, out_features=1024, bias=True)
          (6): Permute()
        )
        (stochastic_depth): StochasticDepth(p=0.5, mode=row)
      )
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (classifier): Sequential(
    (0): LayerNorm2d((1024,), eps=1e-06, elementwise_affine=True)
    (1): Flatten(start_dim=1, end_dim=-1)
    (2): Linear(in_features=1024, out_features=1000, bias=True)
  )
)
pth文件的类型是：<class 'collections.OrderedDict'>
pth文件的字典长度是：344
------pth文件的字典key包含------
key:
features.0.0.weight
features.0.0.bias
features.0.1.weight
features.0.1.bias
features.1.0.layer_scale
features.1.0.block.0.weight
features.1.0.block.0.bias
features.1.0.block.2.weight
features.1.0.block.2.bias
features.1.0.block.3.weight
features.1.0.block.3.bias
features.1.0.block.5.weight
features.1.0.block.5.bias
features.1.1.layer_scale
features.1.1.block.0.weight
features.1.1.block.0.bias
features.1.1.block.2.weight
features.1.1.block.2.bias
features.1.1.block.3.weight
features.1.1.block.3.bias
features.1.1.block.5.weight
features.1.1.block.5.bias
features.1.2.layer_scale
features.1.2.block.0.weight
features.1.2.block.0.bias
features.1.2.block.2.weight
features.1.2.block.2.bias
features.1.2.block.3.weight
features.1.2.block.3.bias
features.1.2.block.5.weight
features.1.2.block.5.bias
features.2.0.weight
features.2.0.bias
features.2.1.weight
features.2.1.bias
features.3.0.layer_scale
features.3.0.block.0.weight
features.3.0.block.0.bias
features.3.0.block.2.weight
features.3.0.block.2.bias
features.3.0.block.3.weight
features.3.0.block.3.bias
features.3.0.block.5.weight
features.3.0.block.5.bias
features.3.1.layer_scale
features.3.1.block.0.weight
features.3.1.block.0.bias
features.3.1.block.2.weight
features.3.1.block.2.bias
features.3.1.block.3.weight
features.3.1.block.3.bias
features.3.1.block.5.weight
features.3.1.block.5.bias
features.3.2.layer_scale
features.3.2.block.0.weight
features.3.2.block.0.bias
features.3.2.block.2.weight
features.3.2.block.2.bias
features.3.2.block.3.weight
features.3.2.block.3.bias
features.3.2.block.5.weight
features.3.2.block.5.bias
features.4.0.weight
features.4.0.bias
features.4.1.weight
features.4.1.bias
features.5.0.layer_scale
features.5.0.block.0.weight
features.5.0.block.0.bias
features.5.0.block.2.weight
features.5.0.block.2.bias
features.5.0.block.3.weight
features.5.0.block.3.bias
features.5.0.block.5.weight
features.5.0.block.5.bias
features.5.1.layer_scale
features.5.1.block.0.weight
features.5.1.block.0.bias
features.5.1.block.2.weight
features.5.1.block.2.bias
features.5.1.block.3.weight
features.5.1.block.3.bias
features.5.1.block.5.weight
features.5.1.block.5.bias
features.5.2.layer_scale
features.5.2.block.0.weight
features.5.2.block.0.bias
features.5.2.block.2.weight
features.5.2.block.2.bias
features.5.2.block.3.weight
features.5.2.block.3.bias
features.5.2.block.5.weight
features.5.2.block.5.bias
features.5.3.layer_scale
features.5.3.block.0.weight
features.5.3.block.0.bias
features.5.3.block.2.weight
features.5.3.block.2.bias
features.5.3.block.3.weight
features.5.3.block.3.bias
features.5.3.block.5.weight
features.5.3.block.5.bias
features.5.4.layer_scale
features.5.4.block.0.weight
features.5.4.block.0.bias
features.5.4.block.2.weight
features.5.4.block.2.bias
features.5.4.block.3.weight
features.5.4.block.3.bias
features.5.4.block.5.weight
features.5.4.block.5.bias
features.5.5.layer_scale
features.5.5.block.0.weight
features.5.5.block.0.bias
features.5.5.block.2.weight
features.5.5.block.2.bias
features.5.5.block.3.weight
features.5.5.block.3.bias
features.5.5.block.5.weight
features.5.5.block.5.bias
features.5.6.layer_scale
features.5.6.block.0.weight
features.5.6.block.0.bias
features.5.6.block.2.weight
features.5.6.block.2.bias
features.5.6.block.3.weight
features.5.6.block.3.bias
features.5.6.block.5.weight
features.5.6.block.5.bias
features.5.7.layer_scale
features.5.7.block.0.weight
features.5.7.block.0.bias
features.5.7.block.2.weight
features.5.7.block.2.bias
features.5.7.block.3.weight
features.5.7.block.3.bias
features.5.7.block.5.weight
features.5.7.block.5.bias
features.5.8.layer_scale
features.5.8.block.0.weight
features.5.8.block.0.bias
features.5.8.block.2.weight
features.5.8.block.2.bias
features.5.8.block.3.weight
features.5.8.block.3.bias
features.5.8.block.5.weight
features.5.8.block.5.bias
features.5.9.layer_scale
features.5.9.block.0.weight
features.5.9.block.0.bias
features.5.9.block.2.weight
features.5.9.block.2.bias
features.5.9.block.3.weight
features.5.9.block.3.bias
features.5.9.block.5.weight
features.5.9.block.5.bias
features.5.10.layer_scale
features.5.10.block.0.weight
features.5.10.block.0.bias
features.5.10.block.2.weight
features.5.10.block.2.bias
features.5.10.block.3.weight
features.5.10.block.3.bias
features.5.10.block.5.weight
features.5.10.block.5.bias
features.5.11.layer_scale
features.5.11.block.0.weight
features.5.11.block.0.bias
features.5.11.block.2.weight
features.5.11.block.2.bias
features.5.11.block.3.weight
features.5.11.block.3.bias
features.5.11.block.5.weight
features.5.11.block.5.bias
features.5.12.layer_scale
features.5.12.block.0.weight
features.5.12.block.0.bias
features.5.12.block.2.weight
features.5.12.block.2.bias
features.5.12.block.3.weight
features.5.12.block.3.bias
features.5.12.block.5.weight
features.5.12.block.5.bias
features.5.13.layer_scale
features.5.13.block.0.weight
features.5.13.block.0.bias
features.5.13.block.2.weight
features.5.13.block.2.bias
features.5.13.block.3.weight
features.5.13.block.3.bias
features.5.13.block.5.weight
features.5.13.block.5.bias
features.5.14.layer_scale
features.5.14.block.0.weight
features.5.14.block.0.bias
features.5.14.block.2.weight
features.5.14.block.2.bias
features.5.14.block.3.weight
features.5.14.block.3.bias
features.5.14.block.5.weight
features.5.14.block.5.bias
features.5.15.layer_scale
features.5.15.block.0.weight
features.5.15.block.0.bias
features.5.15.block.2.weight
features.5.15.block.2.bias
features.5.15.block.3.weight
features.5.15.block.3.bias
features.5.15.block.5.weight
features.5.15.block.5.bias
features.5.16.layer_scale
features.5.16.block.0.weight
features.5.16.block.0.bias
features.5.16.block.2.weight
features.5.16.block.2.bias
features.5.16.block.3.weight
features.5.16.block.3.bias
features.5.16.block.5.weight
features.5.16.block.5.bias
features.5.17.layer_scale
features.5.17.block.0.weight
features.5.17.block.0.bias
features.5.17.block.2.weight
features.5.17.block.2.bias
features.5.17.block.3.weight
features.5.17.block.3.bias
features.5.17.block.5.weight
features.5.17.block.5.bias
features.5.18.layer_scale
features.5.18.block.0.weight
features.5.18.block.0.bias
features.5.18.block.2.weight
features.5.18.block.2.bias
features.5.18.block.3.weight
features.5.18.block.3.bias
features.5.18.block.5.weight
features.5.18.block.5.bias
features.5.19.layer_scale
features.5.19.block.0.weight
features.5.19.block.0.bias
features.5.19.block.2.weight
features.5.19.block.2.bias
features.5.19.block.3.weight
features.5.19.block.3.bias
features.5.19.block.5.weight
features.5.19.block.5.bias
features.5.20.layer_scale
features.5.20.block.0.weight
features.5.20.block.0.bias
features.5.20.block.2.weight
features.5.20.block.2.bias
features.5.20.block.3.weight
features.5.20.block.3.bias
features.5.20.block.5.weight
features.5.20.block.5.bias
features.5.21.layer_scale
features.5.21.block.0.weight
features.5.21.block.0.bias
features.5.21.block.2.weight
features.5.21.block.2.bias
features.5.21.block.3.weight
features.5.21.block.3.bias
features.5.21.block.5.weight
features.5.21.block.5.bias
features.5.22.layer_scale
features.5.22.block.0.weight
features.5.22.block.0.bias
features.5.22.block.2.weight
features.5.22.block.2.bias
features.5.22.block.3.weight
features.5.22.block.3.bias
features.5.22.block.5.weight
features.5.22.block.5.bias
features.5.23.layer_scale
features.5.23.block.0.weight
features.5.23.block.0.bias
features.5.23.block.2.weight
features.5.23.block.2.bias
features.5.23.block.3.weight
features.5.23.block.3.bias
features.5.23.block.5.weight
features.5.23.block.5.bias
features.5.24.layer_scale
features.5.24.block.0.weight
features.5.24.block.0.bias
features.5.24.block.2.weight
features.5.24.block.2.bias
features.5.24.block.3.weight
features.5.24.block.3.bias
features.5.24.block.5.weight
features.5.24.block.5.bias
features.5.25.layer_scale
features.5.25.block.0.weight
features.5.25.block.0.bias
features.5.25.block.2.weight
features.5.25.block.2.bias
features.5.25.block.3.weight
features.5.25.block.3.bias
features.5.25.block.5.weight
features.5.25.block.5.bias
features.5.26.layer_scale
features.5.26.block.0.weight
features.5.26.block.0.bias
features.5.26.block.2.weight
features.5.26.block.2.bias
features.5.26.block.3.weight
features.5.26.block.3.bias
features.5.26.block.5.weight
features.5.26.block.5.bias
features.6.0.weight
features.6.0.bias
features.6.1.weight
features.6.1.bias
features.7.0.layer_scale
features.7.0.block.0.weight
features.7.0.block.0.bias
features.7.0.block.2.weight
features.7.0.block.2.bias
features.7.0.block.3.weight
features.7.0.block.3.bias
features.7.0.block.5.weight
features.7.0.block.5.bias
features.7.1.layer_scale
features.7.1.block.0.weight
features.7.1.block.0.bias
features.7.1.block.2.weight
features.7.1.block.2.bias
features.7.1.block.3.weight
features.7.1.block.3.bias
features.7.1.block.5.weight
features.7.1.block.5.bias
features.7.2.layer_scale
features.7.2.block.0.weight
features.7.2.block.0.bias
features.7.2.block.2.weight
features.7.2.block.2.bias
features.7.2.block.3.weight
features.7.2.block.3.bias
features.7.2.block.5.weight
features.7.2.block.5.bias
classifier.0.weight
classifier.0.bias
classifier.2.weight
classifier.2.bias
------------------------------
